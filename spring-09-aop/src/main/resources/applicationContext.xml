<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--    注册bean-->
    <bean id="userService" class="com.wu.pojo.UserServiceImpl"/>
    <bean id="log" class="com.wu.log.Log"/>
    <bean id="afterLog" class="com.wu.log.AfterLog"/>

    <!--方式一：spring API接口实现 AOP  配置aop：导入aop的约束-->
    <aop:config>
        <!--切入点 在哪个地方执行spring方法-->
        <!--execution要执行的位置  xxpublic修饰词  返回值 类名 方法名 参数-->
        <aop:pointcut id="pointcut" expression="execution(* com.wu.pojo.UserServiceImpl.*(..))"/>
        <!--执行环绕增强-->
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>
    <!--方式二：自定义来实现 AOP -->
    <bean id="diy" class="com.wu.diy.DiyPointCut"/>
    <aop:config>
        <aop:aspect ref="diy">
            <aop:pointcut id="point" expression="execution(* com.wu.pojo.UserServiceImpl.*(..))"/>
            <aop:before method="before" pointcut-ref="point"/>
            <aop:before method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>
    <!--方式三：-->
    <bean id="annotationPointCut" class="com.wu.diy.AnnotationPointCut"/>
    <!--    注解支持:自动代理   jdk默认proxy-target-class="false" cglib proxy-target-class="true" -->
    <aop:aspectj-autoproxy/>
</beans>